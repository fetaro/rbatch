contents = {}

contents[".rbatchrc"] = <<EOF
# RBatch Run-Conf (.rbatchrc)
#
#   This format is YAML.
#

# -------------------
# Global setting
# -------------------

# Conf Directory
#
#   Default is "<home>/conf"
#   <home> is replaced to ${RB_HOME}
#
#conf_dir : <home>/config/
#conf_dir : /etc/rbatch/

# Common Config file name
#
#   Default is "common.yaml"
#
#common_conf_name : share.yaml

# Library Directory
#
#   Default is "<home>/lib"
#   <home> is replaced to ${RB_HOME}
#
#lib_dir : /usr/local/lib/rbatch/

# Auto Library Load
#
#   Default is true
#   If true, require "(library directory)/*.rb" before script run.
#
#auto_lib_load : true
#auto_lib_load : false

# Forbit Script Running Doubly
#
#   Default is false.
#   If true, two same name scripts cannot run at the same time.
#
#forbid_double_run : true
#forbid_double_run : false

# RBatch Journal Level
#
#   Default is 1
#   RBatch Journal is message of RBatch and is output to STDOUT. 
#   If 2, put much more information.
#   If 0, put nothing.
#
#   Example of RBatch Journal are follows.
#     [RBatch] === START RBatch === (PID=5795)
#     [RBatch] RB_HOME : "/path/to/"
#     [RBatch] Load Run-Conf: "/path/to/.rbatchrc"
#     [RBatch] Start Script : "/path/to/bin/hello.rb"
#     ....
#
#rbatch_journal_level : 2
#rbatch_journal_level : 0

# Mix RBatch Journal to Logs
#
#   Default is true.
#   If true, RBatch Journal is output not only STDOUT
#   but also log file(s) which is(are) opened at time.
#
#mix_rbatch_journal_to_logs : true
#mix_rbatch_journal_to_logs : false

# -------------------
# Log setting
# -------------------

# Log Directory
#
#   Default is "<home>/log"
#   <home> is replaced to ${RB_HOME}
#
#log_dir : <home>/rb_log
#log_dir : /var/log/rbatch/

# Log File Name
#
#   Default is "<date>_<time>_<prog>.log".
#   <data> is replaced to YYYYMMDD date string
#   <time> is replaced to HHMMSS time string
#   <prog> is replaced to Program file base name (except extention).
#   <host> is replaced to Hostname.
#
#log_name : "<date>_<time>_<prog>.log"
#log_name : "<date>_<prog>.log"

# Append Log
#
#   Default is ture.
#
#log_append : true
#log_append : false

# Log Level
#
#   Default is "info".
#   Effective values are "debug","info","wran","error",and "fatal".
#
#log_level : "debug"
#log_level : "warn"

# Print log string both log file and STDOUT
#
#   Default is false.
#
#log_stdout : true
#log_stdout : false

# Delete old log files
#
#   Default is false.
#   If this is true, delete old log file when RBatch::Log.new is called.
#   A log file to delete is a log file which was made by the
#   RBatch::Log instance, and log filename format include "<date>".
#
#log_delete_old_log : true
#log_delete_old_log : false

# Expire Date of Log Files
#
#   Default is 7.
#
#log_delete_old_log_date : 14

# Log buffering
#
#   Default is false.
#   If true, log output is bufferd.
#
#log_bufferd : true
#log_bufferd : false

# Output Exit Status
#
#   Default is true.
#   When you use the "exit" method in a log block,
#   output exit status into the log file.
#
#log_output_exit_status : true
#log_output_exit_status : false

# Send Mail
#
#   Default is false.
#   When log.error(msg) or log.fatal(msg) called , send e-mail
#   including "msg".
#
#log_send_mail : true

# Mail Parameters
#
#log_mail_to   : "xxx@sample.com"
#log_mail_from : "xxx@sample.com"
#log_mail_server_host : "localhost"
#log_mail_server_port : 25
#
# if you want to send multiple recipients...
#
#log_mail_to :
#  - "AAA@sample.com"
#  - "BBB@sample.com"

# -------------------
# Cmd setting
# -------------------

# Raise Exception
#
#   Default is false.
#   If true, when command exit status is not 0, raise exception.
#
#cmd_raise : true
#cmd_raise : false

# Command Timeout
#
#   Default is 0 [sec] (=no timeout).
#
#cmd_timeout : 5

EOF

contents["bin/hello_world.rb"] = <<EOF
require 'rbatch'

# Config
p RBatch.config["key1"]
p RBatch.config["key2"]

# cmd
result = RBatch.cmd("ls")
p result.stdout
p result.stderr
p result.status
p result

# Log
RBatch::Log.new{|log|
  log.info("hello world")
  log.error("this is error")
  raise "Exception here"
}

EOF

contents["conf/hello_world.yaml"] = <<EOF
key1 : value1
key2 :
  - a
  - b
  - c
EOF


require 'fileutils'
["bin","conf","log","lib"].each do | dir |
  if ! Dir.exists?(dir)
    FileUtils.mkdir(dir)
    puts "create ./" + dir
  else
    puts "exist ./" + dir + " (not create)"
  end
end
["bin/hello_world.rb","conf/hello_world.yaml",".rbatchrc"].each do | file |
  if ! File.exists?(file)
    File.open(file, "w") { |f| f.puts contents[file] }
    puts "create ./" + file
  else
    puts "exist ./" + file + "  (not create)"
  end
end

